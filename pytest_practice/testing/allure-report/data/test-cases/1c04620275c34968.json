{
  "uid" : "1c04620275c34968",
  "name" : "test_sub[错误样例]",
  "fullName" : "pytest_practice.testing.test_calculator_second.TestCalculator#test_sub",
  "historyId" : "1c94c2e954734a2ce29750fc1b79f54e",
  "time" : {
    "start" : 1599554105377,
    "stop" : 1599554105377,
    "duration" : 0
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: assert 4 == 2",
  "statusTrace" : "self = <pytest_practice.testing.test_calculator_second.TestCalculator object at 0x1118f9a50>, get_cal = <pytest_practice.pythoncode.calculator.Calculator object at 0x1118a0710>, start_cal = None, get_sub = [3, 1, 4]\n\n        @pytest.mark.sub\n    #    @pytest.mark.run(order=1)\n        @pytest.mark.second\n        def test_sub(self,get_cal,start_cal,get_sub):\n            if type(get_sub[0]) is float or type(get_sub[1]) is float:\n                result = round(get_cal.sub(get_sub[0],get_sub[1]),2)\n            else:\n                result = get_cal.sub(get_sub[0], get_sub[1])\n>           assert get_sub[2] == result\nE           assert 4 == 2\n\ntest_calculator_second.py:32: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "get_sub",
    "time" : {
      "start" : 1599554105376,
      "stop" : 1599554105376,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "start_cal",
    "time" : {
      "start" : 1599554105375,
      "stop" : 1599554105376,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_cal",
    "time" : {
      "start" : 1599554105230,
      "stop" : 1599554105230,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: assert 4 == 2",
    "statusTrace" : "self = <pytest_practice.testing.test_calculator_second.TestCalculator object at 0x1118f9a50>, get_cal = <pytest_practice.pythoncode.calculator.Calculator object at 0x1118a0710>, start_cal = None, get_sub = [3, 1, 4]\n\n        @pytest.mark.sub\n    #    @pytest.mark.run(order=1)\n        @pytest.mark.second\n        def test_sub(self,get_cal,start_cal,get_sub):\n            if type(get_sub[0]) is float or type(get_sub[1]) is float:\n                result = round(get_cal.sub(get_sub[0],get_sub[1]),2)\n            else:\n                result = get_cal.sub(get_sub[0], get_sub[1])\n>           assert get_sub[2] == result\nE           assert 4 == 2\n\ntest_calculator_second.py:32: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "bd13396efbe04d34",
      "name" : "stdout",
      "source" : "bd13396efbe04d34.txt",
      "type" : "text/plain",
      "size" : 64
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "start_cal::0",
    "time" : {
      "start" : 1599554105381,
      "stop" : 1599554105381,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_cal::0",
    "time" : {
      "start" : 1599554105468,
      "stop" : 1599554105469,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "second"
  }, {
    "name" : "tag",
    "value" : "run(order=1)"
  }, {
    "name" : "tag",
    "value" : "sub"
  }, {
    "name" : "parentSuite",
    "value" : "pytest_practice.testing"
  }, {
    "name" : "suite",
    "value" : "test_calculator_second"
  }, {
    "name" : "subSuite",
    "value" : "TestCalculator"
  }, {
    "name" : "host",
    "value" : "localhost"
  }, {
    "name" : "thread",
    "value" : "17558-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "pytest_practice.testing.test_calculator_second"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "get_sub",
    "value" : "[3, 1, 4]"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "sub", "run(order=1)", "second" ]
  },
  "source" : "1c04620275c34968.json",
  "parameterValues" : [ "[3, 1, 4]" ]
}